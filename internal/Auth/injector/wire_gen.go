// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"Dzaakk/simple-commerce/internal/auth/handler"
	"Dzaakk/simple-commerce/internal/auth/repository"
	"Dzaakk/simple-commerce/internal/auth/route"
	"Dzaakk/simple-commerce/internal/auth/usecase"
	repository2 "Dzaakk/simple-commerce/internal/customer/repository"
	usecase2 "Dzaakk/simple-commerce/internal/customer/usecase"
	repository3 "Dzaakk/simple-commerce/internal/seller/repository"
	usecase3 "Dzaakk/simple-commerce/internal/seller/usecase"
	repository4 "Dzaakk/simple-commerce/internal/shopping_cart/repository"
	"database/sql"
)

// Injectors from wire.go:

func InitializedService(db *sql.DB) *route.AuthRoutes {
	authRepository := repository.NewAuthRepository(db)
	customerRepository := repository2.NewCustomerRepository(db)
	sellerRepository := repository3.NewSellerRepository(db)
	shoppingCartRepository := repository4.NewShoppingCartRepository(db)
	authUseCase := usecase.NewAuthUseCase(authRepository, customerRepository, sellerRepository, shoppingCartRepository)
	customerUseCase := usecase2.NewCustomerUseCase(customerRepository)
	sellerUseCase := usecase3.NewSellerUseCase(sellerRepository)
	authHandler := handler.NewAtuhHandler(authUseCase, customerUseCase, sellerUseCase)
	authRoutes := route.NewAuthRoutes(authHandler)
	return authRoutes
}
