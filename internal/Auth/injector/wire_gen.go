// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"Dzaakk/simple-commerce/internal/auth/handlers"
	"Dzaakk/simple-commerce/internal/auth/repositories"
	"Dzaakk/simple-commerce/internal/auth/routes"
	"Dzaakk/simple-commerce/internal/auth/usecases"
	repositories2 "Dzaakk/simple-commerce/internal/customer/repositories"
	usecases2 "Dzaakk/simple-commerce/internal/customer/usecases"
	repositories3 "Dzaakk/simple-commerce/internal/seller/repositories"
	usecases3 "Dzaakk/simple-commerce/internal/seller/usecases"
	repositories4 "Dzaakk/simple-commerce/internal/shopping_cart/repositories"
	"database/sql"
)

// Injectors from wire.go:

func InitializedService(db *sql.DB) *routes.AuthRoutes {
	authRepository := repositories.NewAuthRepository(db)
	customerRepository := repositories2.NewCustomerRepository(db)
	sellerRepository := repositories3.NewSellerRepository(db)
	shoppingCartRepository := repositories4.NewShoppingCartRepository(db)
	authUseCase := usecases.NewAuthUseCase(authRepository, customerRepository, sellerRepository, shoppingCartRepository)
	customerUseCase := usecases2.NewCustomerUseCase(customerRepository)
	sellerUseCase := usecases3.NewSellerUseCase(sellerRepository)
	authHandler := handlers.NewAtuhHandler(authUseCase, customerUseCase, sellerUseCase)
	authRoutes := routes.NewAuthRoutes(authHandler)
	return authRoutes
}
