// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"Dzaakk/simple-commerce/internal/auth/handler"
	"Dzaakk/simple-commerce/internal/auth/repository"
	"Dzaakk/simple-commerce/internal/auth/route"
	"Dzaakk/simple-commerce/internal/auth/usecase"
	repository2 "Dzaakk/simple-commerce/internal/customer/repository"
	usecase3 "Dzaakk/simple-commerce/internal/email/usecase"
	"Dzaakk/simple-commerce/internal/middleware/jwt"
	repository3 "Dzaakk/simple-commerce/internal/seller/repository"
	usecase2 "Dzaakk/simple-commerce/internal/seller/usecase"
	repository4 "Dzaakk/simple-commerce/internal/shopping_cart/repository"
	"database/sql"
	"github.com/go-redis/redis/v8"
)

// Injectors from wire.go:

func InitializedService(db *sql.DB, redis2 *redis.Client) *route.AuthRoutes {
	authCacheCustomer := repository.NewAuthCacheCustomerRepository(redis2)
	authCacheSeller := repository.NewAuthCacheSellerRepository(redis2)
	customerRepository := repository2.NewCustomerRepository(db)
	sellerRepository := repository3.NewSellerRepository(db)
	shoppingCartRepository := repository4.NewShoppingCartRepository(db)
	authUseCase := usecase.NewAuthUseCase(authCacheCustomer, authCacheSeller, customerRepository, sellerRepository, shoppingCartRepository)
	sellerUseCase := usecase2.NewSellerUseCase(sellerRepository)
	emailUseCase := usecase3.NewEmailUseCase()
	authHandler := handler.NewAtuhHandler(authUseCase, sellerUseCase, emailUseCase)
	jwtCustomerMiddleware := middleware.NewJWTCustomerMiddleware(authCacheCustomer)
	jwtSellerMiddleware := middleware.NewJWTSellerMiddleware(authCacheSeller)
	authRoutes := route.NewAuthRoutes(authHandler, jwtCustomerMiddleware, jwtSellerMiddleware)
	return authRoutes
}
